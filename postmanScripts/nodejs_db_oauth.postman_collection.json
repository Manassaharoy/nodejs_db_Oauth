{
	"info": {
		"_postman_id": "5c343528-a87e-43cd-bbad-e0842a819b22",
		"name": "nodejs_db_oauth",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24188960"
	},
	"item": [
		{
			"name": "encryption active",
			"item": [
				{
					"name": "Sign up Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {\r",
									"    \"email\": \"manas@gmail.com\",\r",
									"    \"phoneNumber\": \"01515212628\",\r",
									"    \"password\": \"111111\"\r",
									"}\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"data\": \"{{data}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "login (get a token) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {\r",
									"    \"authorization\":\"application:secret\",\r",
									"    \"grant_type\": \"password\",\r",
									"    \"phoneNumber\": \"01515212628\",\r",
									"    \"password\": \"111111\"\r",
									"}\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n    \"data\": \"{{data}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth check Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {}\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ccf92df05af596c19c11c96a8dbe4f3465768fce",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": \"{{data}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/authcheck",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"authcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "revoke token Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {\r",
									"    \"phoneNumber\":\"01515212628\",\r",
									"    \"password\":\"111111\",\r",
									"    \"accessToken\":\"b7ecb47fd7ec10cccf27a24f73fb5446576e3e21\"\r",
									"}\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{\r\n    \"data\": \"{{data}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh token grant Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {\r",
									"    \"authorization\":\"application:secret\",\r",
									"    \"grant_type\":\"refresh_token\",\r",
									"    \"phoneNumber\":\"01515212628\",\r",
									"    \"password\":\"111111\",\r",
									"    \"refreshToken\":\"824816b2bc6ef3ec8a1f6f688a5c968b7dc8d258\"\r",
									"}\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n\r\n{\r\n    \"data\": \"{{data}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/refreshtoken",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"refreshtoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "All users Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {}\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ccf92df05af596c19c11c96a8dbe4f3465768fce",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"data\": \"{{data}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user details Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Get the data to encrypt\r",
									"\r",
									"data = {\r",
									"    \"id\":\"6448116366cbe796873146b4\"\r",
									"}\r",
									"\r",
									"\r",
									"var requestBody = JSON.stringify(data);\r",
									"\r",
									"// Encrypt the request body using AES encryption\r",
									"var encrypted = CryptoJS.AES.encrypt(requestBody, key, {\r",
									"    iv: iv,\r",
									"    padding: CryptoJS.pad.Pkcs7,\r",
									"    mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the encrypted data to a Base64-encoded string\r",
									"var encryptedBase64 = encrypted.ciphertext.toString(CryptoJS.enc.Base64);\r",
									"\r",
									"// // Set the encrypted data as the request body\r",
									"// request.data = encryptedBase64;\r",
									"\r",
									"pm.variables.set(\"data\", encryptedBase64)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Import the CryptoJS library\r",
									"var CryptoJS = require('crypto-js');\r",
									"\r",
									"// Define the encryption key and IV\r",
									"var keyString = 'thisIsAverySpecialSecretKey00000';\r",
									"var IV = '1583288699248111';\r",
									"\r",
									"// Convert the key and IV to CryptoJS format\r",
									"var key = CryptoJS.enc.Utf8.parse(keyString);\r",
									"var iv = CryptoJS.enc.Utf8.parse(IV);\r",
									"\r",
									"// Convert the Base64-encoded string to ciphertext\r",
									"console.info(\"response from server\", pm.response.json().encoded)\r",
									"var ciphertext = CryptoJS.enc.Base64.parse(pm.response.json().encoded);\r",
									"\r",
									"// Decrypt the ciphertext using AES encryption\r",
									"var decrypted = CryptoJS.AES.decrypt({\r",
									"  ciphertext: ciphertext\r",
									"}, key, {\r",
									"  iv: iv,\r",
									"  padding: CryptoJS.pad.Pkcs7,\r",
									"  mode: CryptoJS.mode.CBC\r",
									"});\r",
									"\r",
									"// Convert the decrypted data to a string\r",
									"var decryptedString = decrypted.toString(CryptoJS.enc.Utf8);\r",
									"\r",
									"console.log(JSON.parse(decryptedString));\r",
									"\r",
									"pm.test(\"response data: \"+decryptedString, function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.visualizer.set(decryptedString)"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ccf92df05af596c19c11c96a8dbe4f3465768fce",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"data\": \"{{data}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/users/userdetails",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								"userdetails"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "no encryption",
			"item": [
				{
					"name": "Sign up Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"manas@gmail.com\",\n    \"phoneNumber\": \"01515212628\",\n    \"password\": \"111111\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "login (get a token) Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authorization\":\"application:secret\",\r\n    \"grant_type\": \"password\",\r\n    \"phoneNumber\": \"01515212628\",\r\n    \"password\": \"111111\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "auth check Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ab1a1c5fd3e897c8e5bd0080acfcd8d2e0060586",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/auth/authcheck",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"authcheck"
							]
						}
					},
					"response": []
				},
				{
					"name": "revoke token Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"phoneNumber\":\"01515212628\",\r\n    \"password\":\"111111\",\r\n    \"accessToken\":\"1b63f1222d296b9168afb69752ca16202a629ed6\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh token grant Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"authorization\":\"application:secret\",\r\n    \"grant_type\":\"refresh_token\",\r\n    \"phoneNumber\":\"01515212628\",\r\n    \"password\":\"111111\",\r\n    \"refreshToken\":\"e5d5a2c22271579f3d23683e4934f3973f9243d0\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/auth/refreshtoken",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"auth",
								"refreshtoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "All users Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ab1a1c5fd3e897c8e5bd0080acfcd8d2e0060586",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "user details Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "ab1a1c5fd3e897c8e5bd0080acfcd8d2e0060586",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\":\"6450a76339317379d943a0a8\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/users/userdetails",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"users",
								"userdetails"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}